package es.jscan.Pantallas;

import com.thoughtworks.xstream.XStream;
import es.jscan.Beans.XmlDocumento;
import es.jscan.Beans.XmlInfo;
import es.jscan.Beans.XmlLote;
import es.jscan.utilidades.TablaSinEditarCol;
import es.jscan.utilidades.Utilidades;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;

public class PantallaTablaInfoFicheros extends javax.swing.JDialog {

    public String rutafichero = "";
    public boolean cargar = true;

    public PantallaTablaInfoFicheros(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        asignarIconos();
        rutafichero = parent.getName();
        this.setTitle(parent.getTitle());
        cargarTabla();
        setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollTabla = new javax.swing.JScrollPane();
        tablaDatos = new javax.swing.JTable();
        botonAceptar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 440));
        setName("Principal"); // NOI18N
        setResizable(false);

        tablaDatos.setAutoCreateRowSorter(true);
        tablaDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Archivo", "Nº Páginas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaDatos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablaDatos.setFillsViewportHeight(true);
        tablaDatos.setRowSelectionAllowed(false);
        tablaDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaDatosMouseClicked(evt);
            }
        });
        scrollTabla.setViewportView(tablaDatos);

        botonAceptar.setText("Aceptar");
        botonAceptar.setAlignmentY(0.0F);
        botonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAceptarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 883, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(387, 387, 387)
                .addComponent(botonAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scrollTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(botonAceptar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAceptarActionPerformed
        this.dispose();
    }//GEN-LAST:event_botonAceptarActionPerformed

    private void tablaDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaDatosMouseClicked
        if (evt.getClickCount() == 2) {
            int fila = this.tablaDatos.rowAtPoint(evt.getPoint());
            int columna = this.tablaDatos.columnAtPoint(evt.getPoint());
            //   Utilidades.escribeLog("Fila: " + fila + " - Columna: " + columna);
            String texto = this.tablaDatos.getModel().getValueAt(fila, columna).toString();
            Utilidades.copiarTextoPortapapeles(texto);
        }
    }//GEN-LAST:event_tablaDatosMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Utilidades.escribeLog("Error en el main de PantallaTablaInfoFicheros "  + " - " + ex.getMessage());
        } catch (InstantiationException ex) {
            Utilidades.escribeLog("Error en el main de PantallaTablaInfoFicheros "  + " - " + ex.getMessage());
        } catch (IllegalAccessException ex) {
            Utilidades.escribeLog("Error en el main de PantallaTablaInfoFicheros "  + " - " + ex.getMessage());
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            Utilidades.escribeLog("Error en el main de PantallaTablaInfoFicheros "  + " - " + ex.getMessage());
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                PantallaTablaInfoFicheros dialog = new PantallaTablaInfoFicheros(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAceptar;
    private javax.swing.JScrollPane scrollTabla;
    private javax.swing.JTable tablaDatos;
    // End of variables declaration//GEN-END:variables

    private void cargarTabla() {
        if (rutafichero.isEmpty()) {
            return;
        }

        try {
            XStream xstream = new XStream();
            xstream.alias("Lote", XmlLote.class);
            xstream.alias("Info", XmlInfo.class);
            xstream.alias("Documento", XmlDocumento.class);
            FileInputStream fichero;
            fichero = new FileInputStream(rutafichero);
            XmlLote lote = (XmlLote) xstream.fromXML(fichero);
            int numdocs = Integer.parseInt(lote.getInfo().getNumdocumentos());
            Object[] cabecera = {"Documento", "Expediente", "Páginas", "Tamaño (Bytes)", "Estado", "id Gestión Documental"};

            Object[][] datos = new Object[numdocs][6];

            for (int i = 0; i < numdocs; i++) {
                datos[i][0] = lote.getDocumento().get(i).getFichero();
                datos[i][1] = lote.getDocumento().get(i).getExpediente();
                datos[i][2] = lote.getDocumento().get(i).getNumPaginas();
                datos[i][3] = lote.getDocumento().get(i).getTam();
                datos[i][4] = lote.getDocumento().get(i).getResultado();
                datos[i][5] = lote.getDocumento().get(i).getId();
            }

            final TablaSinEditarCol modeloLotes = new TablaSinEditarCol(datos, cabecera);

            try {
                tablaDatos.setModel(modeloLotes);
            } catch (Exception e) {
                Utilidades.escribeLog(e.getMessage());
            }

            tablaDatos.setShowHorizontalLines(true);
            tablaDatos.setRowSelectionAllowed(true);
            tablaDatos.setAutoCreateRowSorter(true);
            tablaDatos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            for (int i = 0; i < modeloLotes.getColumnCount(); i++) {
                TableColumn columna = tablaDatos.getColumnModel().getColumn(i);
                switch (i) {
                    case 0:
                        columna.setPreferredWidth(200);
                        columna.setMinWidth(200);
                        break;
                    case 1:
                        columna.setPreferredWidth(150);
                        columna.setMinWidth(150);
                        break;
                    case 2:
                        columna.setPreferredWidth(80);
                        columna.setMinWidth(80);
                        break;
                    case 3:
                        columna.setPreferredWidth(140);
                        columna.setMinWidth(140);
                        break;
                    case 4:
                        columna.setPreferredWidth(80);
                        columna.setMinWidth(80);
                        break;
                    case 5:
                        columna.setPreferredWidth(650);
                        columna.setMinWidth(650);
                        break;

                }
            }
            tablaDatos.getColumnModel().getColumn(0).setPreferredWidth(150);
            DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
            renderer.setHorizontalAlignment(JLabel.RIGHT);
            tablaDatos.getColumnModel().getColumn(1).setCellRenderer(renderer);
            tablaDatos.getColumnModel().getColumn(2).setCellRenderer(renderer);
            tablaDatos.getColumnModel().getColumn(3).setCellRenderer(renderer);
            DefaultTableCellRenderer renderer2 = new DefaultTableCellRenderer();
            renderer2.setHorizontalAlignment(JLabel.LEFT);
            tablaDatos.getColumnModel().getColumn(0).setCellRenderer(renderer2);

            tablaDatos.doLayout();

        } catch (FileNotFoundException ex) {
            Utilidades.escribeLog("Error al leer los detalles del fichero XML " + rutafichero + " - Error: " + ex.getMessage());
        }

    }

    private void asignarIconos() {
        java.net.URL imgURL = PantallaLotesGuardados.class.getClassLoader().getResource("es/jscan/Pantallas/imagenes/si.png");
        Icon imgicon = new ImageIcon(imgURL);
        this.botonAceptar.setIcon(imgicon);
        this.validate();
    }
}
