package es.jscan.Pantallas;

import com.itextpdf.text.pdf.PdfReader;
import com.thoughtworks.xstream.XStream;
import es.jscan.Beans.ResultadoGDBean;
import es.jscan.Beans.XmlDocumento;
import es.jscan.Beans.XmlInfo;
import es.jscan.Beans.XmlLote;
import es.jscan.utilidades.TablaSinEditarCol;
import es.jscan.utilidades.Utilidades;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.io.*;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Properties;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.xml.ws.Action;

public class PantallaLotesGuardados extends javax.swing.JDialog {
    
    public static PantallaPrincipal ventanapadre = null;
    public String titulo = "GUARDADOS";
    public String botonpulsado = "guardados";
    public String loteseleccionado = "";
    private ArrayList<ResultadoGDBean> resultadogd = null;
    private Boolean botonderecho = false;
    
    public PantallaLotesGuardados(PantallaPrincipal parent, boolean modal) {
        super(parent, modal);
        initComponents();
        ventanapadre = parent;
        setLocationRelativeTo(ventanapadre);
        asignarIconos();
        cargarLotes();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupGuardados = new javax.swing.JPopupMenu();
        opcionBorrarG = new javax.swing.JMenuItem();
        opcionRecuperaLotes = new javax.swing.JMenuItem();
        popupPendientes = new javax.swing.JPopupMenu();
        opcionBorrarP = new javax.swing.JMenuItem();
        botonLotes = new javax.swing.JButton();
        panelBotones = new javax.swing.JPanel();
        scrollGrid = new javax.swing.JScrollPane(gridDatos);
        gridDatos = new javax.swing.JTable();
        botonSalir = new javax.swing.JButton();
        MenuLotes = new javax.swing.JMenuBar();
        opcionOpciones = new javax.swing.JMenu();
        opcionGuardados = new javax.swing.JMenuItem();
        opcionSalir = new javax.swing.JMenuItem();

        opcionBorrarG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/jscan/Pantallas/imagenes/borrar.png"))); // NOI18N
        opcionBorrarG.setText("Borrar Filas");
        opcionBorrarG.setToolTipText("Borrar las Filas Seleccionadas");
        opcionBorrarG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionBorrarGActionPerformed(evt);
            }
        });
        popupGuardados.add(opcionBorrarG);

        opcionRecuperaLotes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/jscan/Pantallas/imagenes/recuperar.png"))); // NOI18N
        opcionRecuperaLotes.setText("Recuperar Lotes incorrectos");
        opcionRecuperaLotes.setToolTipText("<html>\nProceso para tratar de recuperar lotes no guardados. <br>\nSe confirman el número de páginas y se actualiza el fichero 'lote.ini' con la variable 'numpaginas'.<br>\nSi el directorio no es correcto para un lote se borra.");
        opcionRecuperaLotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionRecuperaLotesActionPerformed(evt);
            }
        });
        popupGuardados.add(opcionRecuperaLotes);

        opcionBorrarP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/jscan/Pantallas/imagenes/borrar.png"))); // NOI18N
        opcionBorrarP.setText("Borrar Filas");
        opcionBorrarP.setToolTipText("Borrar las Filas Seleccionadas");
        opcionBorrarP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionBorrarPActionPerformed(evt);
            }
        });
        popupPendientes.add(opcionBorrarP);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Estado de los lotes digitalizados");
        setMinimumSize(new java.awt.Dimension(972, 640));
        setModal(true);
        setName("tabla"); // NOI18N
        setResizable(false);

        botonLotes.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        botonLotes.setMnemonic('G');
        botonLotes.setText("GUARDADOS");
        botonLotes.setToolTipText("Imágenes escaneadas o importadas pendientes de envío. ");
        botonLotes.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        botonLotes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLotesActionPerformed(evt);
            }
        });

        panelBotones.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelBotones.setAutoscrolls(true);
        panelBotones.setMinimumSize(new java.awt.Dimension(972, 640));
        panelBotones.setPreferredSize(new java.awt.Dimension(970, 640));

        scrollGrid.setAutoscrolls(true);
        scrollGrid.setMaximumSize(new java.awt.Dimension(panelBotones.getHeight()-2,panelBotones.getWidth()-2));
        scrollGrid.setMinimumSize(new java.awt.Dimension(panelBotones.getHeight()-2,panelBotones.getWidth()-2));
        scrollGrid.setPreferredSize(new java.awt.Dimension(panelBotones.getHeight()-2,panelBotones.getWidth()-2));
        scrollGrid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                scrollGridMousePressed(evt);
            }
        });

        gridDatos.setAutoCreateRowSorter(true);
        gridDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        gridDatos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        gridDatos.setAutoscrolls(false);
        gridDatos.setFillsViewportHeight(true);
        gridDatos.setMaximumSize(null);
        gridDatos.setMinimumSize(null);
        gridDatos.setPreferredSize(null);
        gridDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gridDatosMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                gridDatosMousePressed(evt);
            }
        });
        scrollGrid.setViewportView(gridDatos);

        javax.swing.GroupLayout panelBotonesLayout = new javax.swing.GroupLayout(panelBotones);
        panelBotones.setLayout(panelBotonesLayout);
        panelBotonesLayout.setHorizontalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesLayout.createSequentialGroup()
                .addComponent(scrollGrid, javax.swing.GroupLayout.DEFAULT_SIZE, 966, Short.MAX_VALUE)
                .addGap(0, 2, Short.MAX_VALUE))
        );
        panelBotonesLayout.setVerticalGroup(
            panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesLayout.createSequentialGroup()
                .addComponent(scrollGrid, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 122, Short.MAX_VALUE))
        );

        botonSalir.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        botonSalir.setMnemonic('S');
        botonSalir.setText("SALIR");
        botonSalir.setToolTipText("Volver a la pantalla anterior");
        botonSalir.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        opcionOpciones.setMnemonic('O');
        opcionOpciones.setText("Opciones");
        opcionOpciones.setToolTipText("");

        opcionGuardados.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        opcionGuardados.setMnemonic('G');
        opcionGuardados.setText("Lotes Guardados");
        opcionGuardados.setToolTipText("Imágenes escaneadas o importadas pendientes de envío. ");
        opcionGuardados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionGuardadosActionPerformed(evt);
            }
        });
        opcionOpciones.add(opcionGuardados);

        opcionSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        opcionSalir.setMnemonic('S');
        opcionSalir.setText("Salir");
        opcionSalir.setToolTipText("Volver a la pantalla anterior");
        opcionSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionSalirActionPerformed(evt);
            }
        });
        opcionOpciones.add(opcionSalir);

        MenuLotes.add(opcionOpciones);

        setJMenuBar(MenuLotes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(botonLotes, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panelBotones, javax.swing.GroupLayout.PREFERRED_SIZE, 972, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonLotes))
                .addGap(22, 22, 22)
                .addComponent(panelBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {botonLotes, botonSalir});

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void opcionBorrarGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionBorrarGActionPerformed
        PantallaConfirmaDialogo confirma = new PantallaConfirmaDialogo(this, true);
        confirma.setTitle("Borrar " + botonpulsado);
        confirma.etiqueta.setText("¿Desea borrar las filas seleccionadas?");
        confirma.repaint();
        confirma.setVisible(true);
        
        if (confirma.respuesta()) {
            borrarfilas();
        }
    }//GEN-LAST:event_opcionBorrarGActionPerformed
    
    private void gridDatosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridDatosMousePressed
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            botonderecho = true;
            popupmenu(evt);
        }
    }//GEN-LAST:event_gridDatosMousePressed
    
    private void gridDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridDatosMouseClicked
        if (evt.getClickCount() == 2 && evt.getButton() == java.awt.event.MouseEvent.BUTTON1 && gridDatos.getModel().getRowCount() > 0) {
            if (botonpulsado.equals("guardados")) {
                if (PantallaPrincipal.DEBUG) {
                    Utilidades.escribeLog("Doble click en el lote: " + gridDatos.getModel().getValueAt(gridDatos.getSelectedRow(), 0).toString());
                }
                ventanapadre.lote = gridDatos.getModel().getValueAt(gridDatos.getSelectedRow(), 0).toString();
                this.dispose();
            }
        }
    }//GEN-LAST:event_gridDatosMouseClicked
    
    private void opcionBorrarPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionBorrarPActionPerformed
        PantallaConfirmaDialogo confirma = new PantallaConfirmaDialogo(this, true);
        confirma.setTitle("Borrar " + botonpulsado);
        confirma.etiqueta.setText("¿Desea borrar las filas seleccionadas?");
        confirma.repaint();
        confirma.setVisible(true);
        
        if (confirma.respuesta()) {
            borrarfilas();
        }
    }//GEN-LAST:event_opcionBorrarPActionPerformed
    
    private void botonLotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLotesActionPerformed
        cargarLotes();
        botonpulsado = "guardados";
    }//GEN-LAST:event_botonLotesActionPerformed
    
    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        salir();
    }//GEN-LAST:event_botonSalirActionPerformed
    
    private void opcionRecuperaLotesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionRecuperaLotesActionPerformed
        recuperarlotes();
    }//GEN-LAST:event_opcionRecuperaLotesActionPerformed
    
    private void scrollGridMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrollGridMousePressed
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            botonderecho = true;
            popupmenu(evt);
        }
    }//GEN-LAST:event_scrollGridMousePressed
    
    private void opcionGuardadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionGuardadosActionPerformed
        cargarLotes();
        botonpulsado = "guardados";
    }//GEN-LAST:event_opcionGuardadosActionPerformed
        
    private void opcionSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionSalirActionPerformed
        salir();
    }//GEN-LAST:event_opcionSalirActionPerformed
    
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                final PantallaLotesGuardados dialog = new PantallaLotesGuardados(new PantallaPrincipal(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        dialog.dispose();
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar MenuLotes;
    private javax.swing.JButton botonLotes;
    private javax.swing.JButton botonSalir;
    private javax.swing.JTable gridDatos;
    private javax.swing.JMenuItem opcionBorrarG;
    private javax.swing.JMenuItem opcionBorrarP;
    private javax.swing.JMenuItem opcionGuardados;
    private javax.swing.JMenu opcionOpciones;
    private javax.swing.JMenuItem opcionRecuperaLotes;
    private javax.swing.JMenuItem opcionSalir;
    private javax.swing.JPanel panelBotones;
    private javax.swing.JPopupMenu popupGuardados;
    private javax.swing.JPopupMenu popupPendientes;
    private javax.swing.JScrollPane scrollGrid;
    // End of variables declaration//GEN-END:variables

    private void cargarLotes() {
        botonLotes.setBackground(Color.gray);
        
        setTitle(titulo + " - GUARDADOS");
        String ruta = ventanapadre.rutadigita + ventanapadre.separador + "lotes";
        File directorio = new File(ruta);
        if (directorio.exists() == false) {
            TablaSinEditarCol modeloLotes = new TablaSinEditarCol();
            gridDatos.setModel(modeloLotes);
            gridDatos.doLayout();
            return;
        }
        
        String[] listaDir = directorio.list();
        int numficheros = 0;
        int contador = 0;
        Object[][] datos = new Object[listaDir.length][4];
        Object[] cabecera = {"Nombre del Lote",
            "Nº páginas",
            "Fecha de creación",
            "IP del PC"};
        int sinprops = 0;
        int lotemalo = 0;
        
        for (int n = 0; n < listaDir.length; n++) {
            Properties props = ventanapadre.utilidades.leerPropeties(ruta + ventanapadre.separador + listaDir[n].toString() + ventanapadre.separador + "lote.ini");
            if (props == null) {
                sinprops++;
                datos = (Object[][]) ventanapadre.utilidades.resizeArray(datos, listaDir.length - sinprops);
                continue;
            }
            numficheros = (props.getProperty("numpaginas") == null ? 0 : Integer.parseInt(props.getProperty("numpaginas")));
            String lote = listaDir[n].toString();
            if (lote.length() < 28) {
                lotemalo++;
                datos = (Object[][]) ventanapadre.utilidades.resizeArray(datos, listaDir.length - lotemalo);
                continue;
            }
            datos[n - lotemalo - sinprops][0] = lote;
            datos[n - lotemalo - sinprops][1] = "" + numficheros;
            datos[n - lotemalo - sinprops][2] = lote.substring(6, 8) + "/" + lote.substring(4, 6) + "/" + lote.substring(0, 4)
                    + " " + lote.substring(9, 11) + ":" + lote.substring(11, 13) + ":" + lote.substring(13, 15);
            datos[n - lotemalo - sinprops][3] = lote.substring(16, 19) + "." + lote.substring(19, 22) + "." + lote.substring(22, 25) + "." + lote.substring(25, 28);
            contador++;
        }
        
        if (contador <= 0) {
            TablaSinEditarCol modeloLotes = new TablaSinEditarCol();
            gridDatos.setModel(modeloLotes);
            gridDatos.doLayout();
            return;
        }
        
        TablaSinEditarCol modeloLotes = new TablaSinEditarCol(datos, cabecera);
        
        
        gridDatos.setModel(modeloLotes);
        gridDatos.setShowHorizontalLines(true);
        gridDatos.setRowSelectionAllowed(true);
        gridDatos.setAutoCreateRowSorter(true);
//        gridDatos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        gridDatos.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        
        for (int i = 0; i < modeloLotes.getColumnCount(); i++) {
            TableColumn columna = gridDatos.getColumnModel().getColumn(i);
            switch (i) {
                case 0:
                    columna.setPreferredWidth(125);
                    columna.setMinWidth(125);
                    break;
                case 1:
                    columna.setPreferredWidth(100);
                    columna.setMinWidth(100);
                    break;
                case 2:
                    columna.setPreferredWidth(20);
                    columna.setMinWidth(20);
                    break;
                
                default:
                    columna.setPreferredWidth(50);
            }
        }
        gridDatos.doLayout();
        
    }

    
    private void asignarIconos() {
        java.net.URL imgURL = PantallaLotesGuardados.class.getClassLoader().getResource("es/jscan/Pantallas/imagenes/guardados.png");
        Icon imgicon = new ImageIcon(imgURL);
        this.botonLotes.setIcon(imgicon);
        
        imgURL = PantallaLotesGuardados.class.getClassLoader().getResource("es/jscan/Pantallas/imagenes/salir.png");
        imgicon = new ImageIcon(imgURL);
        this.botonSalir.setIcon(imgicon);
        
    }
    
    private void popupmenu(MouseEvent evt) {
        if (evt.isPopupTrigger() || botonderecho) {
            botonderecho = false;
            int row = 0;
            int column = 0;
            if (evt.getSource().getClass().getName().equals("javax.swing.JTable")) {
                JTable source = (JTable) evt.getSource();
                row = source.rowAtPoint(evt.getPoint());
                column = source.columnAtPoint(evt.getPoint());
                if (!source.isRowSelected(row)) {
                    source.changeSelection(row, column, false, false);
                }
            }
            if (row <= 0 && column <= 0) {
                opcionBorrarG.setEnabled(false);
            } else {
                opcionBorrarG.setEnabled(true);
            }
            
            popupGuardados.show(evt.getComponent(), evt.getX(), evt.getY());

        }
    }
    
    @Action
    private void recuperarlotes() {
        String ruta = ventanapadre.rutadigita + ventanapadre.separador + "lotes";
        File directorio = new File(ruta);
        if (directorio.exists() == false) {
            return;
        }
        String[] listaDir = directorio.list();
        Utilidades utilidades = new Utilidades();
        for (int a = 0; a < listaDir.length; a++) {
            String rutadirlote = ruta + ventanapadre.separador + listaDir[a].toString();
            File ficheros = new File(rutadirlote);
            String[] listaficheros = ficheros.list();
            String inilote = rutadirlote + ventanapadre.separador + "lote.ini";
            int contjpg = 0;
            int conttif = 0;
            for (int u = 0; u < listaficheros.length; u++) {
                if (listaficheros[u].toString().toLowerCase().endsWith("jpg")) {
                    contjpg = contjpg + 1;
                }
                if (listaficheros[u].toString().toLowerCase().endsWith("tif")) {
                    conttif = conttif + 1;
                }
            }
            if (contjpg == conttif && contjpg > 0) {
                Properties proplote = utilidades.leerPropeties(inilote);
                proplote.setProperty("numpaginas", "" + contjpg);
                utilidades.escribirPropeties(inilote, proplote);
            } else {
                utilidades.borrarDirectorio(rutadirlote);
                Utilidades.escribeLog("Borrado el directorio "+rutadirlote);
            }
        }
        cargarLotes();
    }
    
    @Action
    private void borrarfilas() {
        DefaultTableModel model = (DefaultTableModel) this.gridDatos.getModel();
        int[] rows = gridDatos.getSelectedRows();
        for (int i = rows.length; i > 0; i--) {
            if (botonpulsado.equals("guardados")) {
                ventanapadre.borrarLote(gridDatos.getModel().getValueAt(rows[i - 1], 0).toString());
            }
            /*
             else if (botonpulsado.equals("pendientes")) {
             ventanapadre.borrarPendientes(gridDatos.getModel().getValueAt(rows[i - 1], 0).toString()
             + ventanapadre.separador + gridDatos.getModel().getValueAt(rows[i - 1], 5).toString());
             } else if (botonpulsado.equals("enviados")) {
             ventanapadre.borrarEnviados(gridDatos.getModel().getValueAt(rows[i - 1], 0).toString()
             + ventanapadre.separador + gridDatos.getModel().getValueAt(rows[i - 1], 5).toString());
             }
             */
            model.removeRow(rows[i - 1]);
        }
    }
    
    private void creaLogLote(String lote, ArrayList<ResultadoGDBean> resultadogd) {
        Calendar cal = Calendar.getInstance();
        String anio = String.valueOf(cal.get(Calendar.YEAR));
        String mes = String.valueOf((cal.get(Calendar.MONTH) + 1)).length() == 1 ? "0" + String.valueOf((cal.get(Calendar.MONTH) + 1)) : String.valueOf((cal.get(Calendar.MONTH) + 1));
        String dia = String.valueOf(cal.get(Calendar.DAY_OF_MONTH)).length() == 1 ? "0" + String.valueOf(cal.get(Calendar.DAY_OF_MONTH)) : String.valueOf(cal.get(Calendar.DAY_OF_MONTH));
        String hora = String.valueOf(cal.get(Calendar.HOUR_OF_DAY)).length() == 1 ? "0" + String.valueOf(cal.get(Calendar.HOUR_OF_DAY)) : String.valueOf(cal.get(Calendar.HOUR_OF_DAY));
        String minuto = String.valueOf(cal.get(Calendar.MINUTE)).length() == 1 ? "0" + String.valueOf(cal.get(Calendar.MINUTE)) : String.valueOf(cal.get(Calendar.MINUTE));
        String segundo = String.valueOf(cal.get(Calendar.SECOND)).length() == 1 ? "0" + String.valueOf(cal.get(Calendar.SECOND)) : String.valueOf(cal.get(Calendar.SECOND));
        
        Utilidades util = new Utilidades();
        String dirorigen = ventanapadre.rutadigita + ventanapadre.separador + "pendientes" + ventanapadre.separador + lote + ventanapadre.separador;
        File dir = new File(dirorigen);
        String ficheros[] = dir.list();
        String ficherodestino = ventanapadre.rutadigita + ventanapadre.separador + "enviados" + ventanapadre.separador + lote + ".log";
        String ficheroxml = ventanapadre.rutadigita + ventanapadre.separador + "enviados" + ventanapadre.separador + lote + ".xml";
        
        
        util.copiarFichero(ficherodestino, "texto");
        Properties proplog = new Properties();
        
        XmlLote Lote = new XmlLote();
        XmlInfo Info = new XmlInfo();
        
        String numpaginas = "";
        String tam = "";
        String proceso = "";
        String usuarioldap = "";
        String ip = "";
        String provincia = "";
        String fechadigita = "";
        String fechacreacion = "";
        String expediente = "";
        
        for (int i = 0; i < ficheros.length; i++) {
            String fich = ficheros[i].toString();
            try {
                PdfReader reader = new PdfReader(dirorigen + fich);
                ip = (reader.getInfo().get("IP") == null ? "" : reader.getInfo().get("IP"));
                fechadigita = (reader.getInfo().get("fechadigita") == null ? "" : reader.getInfo().get("fechadigita"));
                fechacreacion = (reader.getInfo().get("fechacreacion") == null ? "" : reader.getInfo().get("fechacreacion"));
                numpaginas = "" + reader.getNumberOfPages();
                tam = "" + NumberFormat.getInstance().format(reader.getFileLength());
                expediente = (reader.getInfo().get("Expediente") == null ? "" : reader.getInfo().get("Expediente"));
                
            } catch (IOException ex) {
                Utilidades.escribeLog("Error -creaLogLote- al leer el PDF " + dirorigen + fich + "  - Error " + ex.getMessage());
            }
            
            proplog.setProperty("numpaginas" + i, numpaginas);
            proplog.setProperty("fihero" + i, fich);
            proplog.setProperty("tam" + i, tam);
            proplog.setProperty("resultado" + i, resultadogd.get(i).getResultado());
            proplog.setProperty("carpeta" + i, resultadogd.get(i).getCarpeta());
            proplog.setProperty("id" + i, resultadogd.get(i).getId());
            proplog.setProperty("usuarioldap", usuarioldap);
            proplog.setProperty("ip", ip);
            proplog.setProperty("fechadigita", fechadigita);
            proplog.setProperty("fechacreacion", fechacreacion);
            proplog.setProperty("fechaenvio", dia + "/" + mes + "/" + anio + " " + hora + ":" + minuto + ":" + segundo);
            proplog.setProperty("numdocumentos", "" + ficheros.length);
            
            XmlDocumento doc = new XmlDocumento();
            doc.setCarpeta(resultadogd.get(i).getCarpeta());
            doc.setExpediente(expediente);
            doc.setFichero(fich);
            doc.setId(resultadogd.get(i).getId());
            doc.setNumPaginas(numpaginas);
            doc.setResultado(resultadogd.get(i).getResultado());
            doc.setTam(tam);
            
            Lote.add(doc);
            
        }
        util.escribirPropeties(ficherodestino, proplog);
        
        Info.setFechacreacion(fechacreacion);
        Info.setFechadigita(fechadigita);
        Info.setFechaenvio(dia + "/" + mes + "/" + anio + " " + hora + ":" + minuto + ":" + segundo);
        Info.setIp(ip);
        Info.setNumdocumentos("" + ficheros.length);
        Info.setProceso(proceso);
        Info.setProvincia(provincia);
        Info.setUsuarioldap(usuarioldap);
        
        Lote.setInfo(Info);
        
        XStream xstream = new XStream();
        
        xstream.alias("Lote", XmlLote.class);
        xstream.alias("Info", XmlInfo.class);
        xstream.alias("Documento", XmlDocumento.class);
        
        try {
            xstream.toXML(Lote, new FileOutputStream(ficheroxml));
        } catch (FileNotFoundException ex) {
            Utilidades.escribeLog("Error -creaLogLote- al escribir el fichero " + ficheroxml + " - Error: " + ex.getMessage());
        }
        
        
    }
    
    private void salir() {
        this.dispose();
    }
}

class FiltroXml implements FilenameFilter {
    
    public boolean accept(File dir, String name) {
        return (name.toLowerCase().endsWith(".xml"));
    }
}

class FiltroLog implements FilenameFilter {
    
    public boolean accept(File dir, String name) {
        return (name.toLowerCase().endsWith(".log"));
    }
}